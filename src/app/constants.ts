export class ApiUrls {
    typeScript = [
        {
            "topic_id": "1",
            "topic_name": "INTRODUCTION",
            "description": "<div>\r\n<p>Angular is a platform that makes it easy to build applications with the web. Angular combines declarative templates, dependency injection, end to end tooling, and integrated best practices to solve development challenges. Angular empowers developers to build applications that live on the web, mobile, or the desktop.AngularJS is a very powerful JavaScript Framework.It is used to create single page application.\r\n<p>over herer you will learn the basics of AngularJS: directives, expressions, filters, modules, controllers, Events, DOM, Forms, Input, Validation, Http, and more.\r\n<p>AngularJS is open source, completely free, and used by thousands of developers around the world. AngularJS extends HTML attributes with Directives, and binds data to HTML with Expressions.\r\n<br/>It is a library written in JavaScript.\r\n<p>You Need to add a script in the html page\r\n<div><pre class=\"JavaScript\"><xmp><script src=\"https://ajax.googleapis.com/ajax/libs/angularjs/1.6.4/angular.min.js\"></script></xmp></div>\r\n<p>You must have a basic understanding of JavaScript HTML, CSS, AJAX.\r\n</div>"
        },
        {
            "topic_id": "2",
            "topic_name": "ENVIRONMENT SETUP",
            "description": "<div>\r\n<h5>1.Download Angular Js</h5>\r\n<p>Install the Angular CLI\r\n<div><pre class=\"JavaScript\"><xmp>npm install -g @angular/cli</xmp></div>\r\n<h5>2.Download Editor Visual studio code</h5>\r\n<p>Create a new application\r\n<h5>3.Include AngularJS</h5>\r\n\r\n<div><pre class=\"JavaScript\"><xmp><head>\r\n<script src = \"https://ajax.googleapis.com/ajax/libs/angularjs/1.4.8/angular.min.js\"></script>\r\n</head></xmp></div>\r\n\r\n<h5>4.Inject Angular On html Page</h5>\r\n<p>Define AngularJS Application using ng-app\r\n\r\n<div><pre class=\"JavaScript\"><xmp><body ng-app = \"angularApp\"></body></xmp></div>\r\n\r\n<h5>5.Controller</h5>\r\n\r\n<div><pre class=\"JavaScript\"><xmp>angular.module(\"angularApp\", [])\r\n.controller(\"NameofController\",function($scope) {\r\n$scope.First = {};\r\n$scope.First.title = \"TechproComsoft\";\r\n});</xmp></div>\r\n\r\n<h5>6.View</h5>\r\n<p>Inject Controller using ng-controller in html page\r\n\r\n<div><pre class=\"JavaScript\"><xmp><div ng-controller = \"NameofController\">\r\nWelcome {{First.title}} to TechproComsoft\r\n</div></xmp></div>\r\n</div>"
        },
        {
            "topic_id": "3",
            "topic_name": "FEATURES",
            "description": "<div>\r\n<p><em class=\"thick\">1.</em> AngularJS provides options to write client side application (using JavaScript) in a clean MVC(Model View Controller) way.\r\n<p><em class=\"thick\">2.</em> AngularJS automatically handles JavaScript code suitable for each browser.\r\n\r\n<h5>3. MVC Architecture: -</h5>\r\n<p>Model-View-Controller architecture.The idea behind using this design pattern,is to split the web application into a more manageable structure.The MVC architecture comprises of three important elements,the model, view and controller.\r\n\r\n<h5>3.1 Model: -</h5><p>The model is where your data are.the data can be a static data or dynamically fetched from a data source,using JSON.\r\n<p>A model comprises of JavaScript object called the scope.Injected to a controller,the model object receives the data from the source and renders it to a view (HTML).\r\n\r\n<h5>3.2 View: -</h5>\r\n<p>The view comprises of HTML elements and directives.This section of application is visible to users.Every view has as an expression(with curly braces {} ),which is tied up to the scope object.\r\n\r\n<h5>3.3 Controller: -</h5>\r\n<p>Controller controls the entire business logic of the application.It initializes the application by creating a new Angular Module.\r\n\r\n<h5>4. Two-way data binding: -</h5>\r\n<p>In two-way data binding,any changes made in the view it will reflect in the model,similarly changes made in the model it will reflect in the view. It is a two-way process.\r\n\r\n<h5>5.Scope: -</h5>\r\n<p>A Scope is a JavaScript object that is injected inside the model, and renders data to the view.They act as glue between controller and view.\r\n\r\n<h5>6.Directives: -</h5>\r\n<p>These are used to create custom HTML tags that serve as new, custom widgets. AngularJS has built-in directives (ngBind, ngModel...).\r\n\r\n<h5>7.Services: -</h5>\r\n<p>Services are javascript functions responsible for doing specific tasks.Controllers can call them as per requirement.They are normally injected using dependency injection mechanism.There are several built-in services for example $http ,$q etc.We can create custom services also.\r\n\r\n<h5>8.Routing: -</h5>\r\n<p>It is the concept switching views.It helps to our application to become a single page application.We must inject Angularjs routing in our module.\r\n\r\n<h5>9.Dependency injections: -</h5>\r\n<p>AngularJS has a built-in dependency injection subsystem that helps in develop,understand,and test.dependency injection is a technique whereby one object supplies the dependencies of another object.A dependency is an object that can be used (a service). An injection is the passing of a dependency to a dependent object (a client) that would use it.\r\n\r\n<h5>10.Templates: -</h5>\r\n<p>These are the displayed view information from the controller and model.They can be a single or multiple views in one page using \"partials\".\r\n</div>"
        },
        {
            "topic_id": "4",
            "topic_name": "DIRECTIVES",
            "description": "<div>\r\n<p>AngularJS lets you extend HTML with new attributes called Directives. AngularJS has a set of built-in directives.\r\n<p><em class=\"thick\">ng-app -</em> This directive starts AngularJS Application.\r\n<p><em class=\"thick\">ng-init -</em> This directive initializes application data.\r\n<p><em class=\"thick\">ng-model -</em> This directive binds the application data to HTML input controls.\r\n<p><em class=\"thick\">ng-repeat -</em> This directive is a sort of loop for reapeating values or data.\r\n\r\n<h5>1. ng-app directive</h5>\r\n<p><em class=\"thick\">1.1</em> starts an AngularJS Application.\r\n<br/><em class=\"thick\">1.2</em> It defines the root element. It automatically initializes or bootstraps the application when web page containing AngularJS Application is loaded. It is also used to load various AngularJS modules in AngularJS Application. In following example, weve defined a default AngularJS application using ng-app attribute of a div element.\r\n<br/><em class=\"thick\">1.3</em> It defines the root element of an AngularJS application.\r\n<p><em class=\"thick\">1.4</em> When this directive in placed in an HTML page,it tells Angular that this HTML page is an angular.js application.\r\n\r\n<p><em class=\"thick\">example:-</em>\r\n\r\n<div><pre class=\"JavaScript\"><xmp>ng-app = \"helloApp\"</xmp></div>\r\n\r\n<h5>2. ng-init</h5>\r\n<p>The ng-init directive initialize application data, The ng-init directive initializes an AngularJS Application data\r\n<div><pre class=\"JavaScript\"><xmp><ng-init=\"name=Shakti>\r\n// initialize name=\"Shakti\"\r\nName:<input type=\"text\" ng-model=\"name>\r\n<p>name: {{ name }}</xmp></div>\r\n\r\n<p><em class=\"thick\">output:</em>\r\n<div><pre class=\"JavaScript\"><xmp>Shakti</xmp></div>\r\n\r\n<h5>3. ng-model</h5>\r\n<p>The ng-model directive binds the value of Html controls to application data.The ng-model directive defines the model/variable to be used in AngularJS Application.\r\n\r\n<div><pre class=\"JavaScript\"><xmp><div ng-app=\"helloApp>\r\n<input type=\"char\" ng-model=\"string1>\r\n<input type=\"char\" ng-model=\"string2>\r\nStrings : {{ string1 +\" \"+ string2 }}\r\n</div></xmp></div>\r\n\r\n<h5>4. ng-repeat directive</h5>\r\n<p>ng-repeat directive renders repeated html elements for each item in a collection and it clones HTML elements once for each item in a collection\r\n<p><em class=\"thick\">example:-</em>\r\n<div><pre class=\"JavaScript\"><xmp><div data-ng-app=\"\" data-ng-init=\"char=[\"himanshu\",\"pranshu\",\"Akash\"]>\r\n<p data-ng-repeat=\"A in char>\r\n{{ A }}\r\n\r\n</div></xmp></div>\r\n<p><em class=\"thick\">output::-</em>\r\n<div><pre class=\"JavaScript\"><xmp>himanshu\r\npranshu\r\nAkash</xmp></div>\r\n</div>"
        },
        {
            "topic_id": "5",
            "topic_name": "EXPRESSIONS",
            "description": "<div>\r\n<p>Expressions are used to bind application data to html.Expressions behaves in same way as ng-bind directives.\r\n<p>AngularJS expressions is written inside double braces: {{ hello }},expressions can also be written inside a directive: ng-bind=\"expression\".\r\n<p>AngularJS will read the expression, and return the result exactly where the expression is written.\r\n<p>AngularJS expressions are much like JavaScript expressions: They can contain literals, operators, and variables.\r\n<p><em class=\"thick\">Example:-</em>\r\n<div><pre class=\"JavaScript\"><xmp>{{ 10 + 5 }} or {{ firstName + \" \" + lastName }}</xmp></div>\r\n<h6>Facts About Expression in angular</h6>\r\n<p><em class=\"thick\">Context:</em> In AngularJS, expressions are evaluated against a scope object.\r\n<p><em class=\"thick\">Forgiving:</em> In AngularJS, expression evaluation is forgiving to undefined and null.\r\n<p><em class=\"thick\">Filters:</em> You can use filters within expressions to format data before displaying it.\r\n<p><em class=\"thick\">No Control Flow Statements:</em> You cannot use the following in an AngularJS expression:conditionals, loops, or exceptions.\r\n<p><em class=\"thick\">No Function Declarations:</em> You cannot declare functions in an AngularJS expression,even inside ng-init directive.\r\n<p><em class=\"thick\">No RegExp Creation With Literal Notation:</em> You cannot create regular expressions in an AngularJS expression. An exception to this rule is ng-pattern which accepts valid RegExp.\r\n<p><em class=\"thick\">No Object Creation With New Operator:</em> You cannot use new operator in an AngularJS expression.\r\n<p><em class=\"thick\">No Bitwise, Comma, And Void Operators:</em> You cannot use Bitwise, , or void operators in an AngularJS expression.\r\n\r\n<p><em class=\"thick\">Example 1:-</em>\r\n\r\n<div><pre class=\"JavaScript\"><xmp><!DOCTYPE html>\r\n<html>\r\n<script src=\"https://ajax.googleapis.com/ajax/libs/angularjs/1.6.4/angular.min.js\"></script>\r\n<body>\r\n<div ng-app>\r\n<p> Expression : {{ 2 * 2 }}\r\n</div>\r\n</body>\r\n</html></xmp></div>\r\n\r\n<p><em class=\"thick\">output:-</em>\r\n<div><pre class=\"JavaScript\"><xmp>Expression : 4</xmp></div>\r\n\r\n<p><em class=\"thick\">Example 2:- strings</em>\r\n<div><pre class=\"JavaScript\"><xmp><div ng-app=\"\" ng-init=\"firstName=Shakti;lastName=tanwar\">\r\n<p>Hello {{ firstName + \" \" + lastName }}\r\n</div></xmp></div>\r\n\r\n<p><em class=\"thick\">output:</em>\r\n<div><pre class=\"JavaScript\"><xmp>hello shakti tanwar</xmp></div>\r\n\r\n<p><em class=\"thick\">Example 3:- Array</em>\r\n<div><pre class=\"JavaScript\"><xmp><div ng-app=\"\" ng-init=\"points=[1,10,11,42,45]\">\r\n<p>The fifth result is {{ points[4]}}\r\n</div></xmp></div>\r\n\r\n<p><em class=\"thick\">output:</em>\r\n<div><pre class=\"JavaScript\"><xmp>45</xmp></div>\r\n</div>"
        },
        {
            "topic_id": "6",
            "topic_name": "CONTROLLER",
            "description": "<div>\r\n<li>AngularJS controllers control the data of AngularJS applications.</li>\r\n<li>AngularJS controllers are regular JavaScript Objects.</li>\r\n<li>AngularJS applications are controlled by controllers.</li>\r\n<li>The ng-controller directive defines the application controller.</li>\r\n<li>A controller is a JavaScript Object, created by a standard JavaScript object constructor.</li><br />\r\n<p>AngularJS application mainly relies on controllers to control the flow of data in the application. A controller is defined using ng-controller directive. A controller is a JavaScript object containing attributes/properties and functions. Each controller accepts $scope as a parameter which refers to the application/module that controller is to control.\r\n<p>AngularJS controllers are used to control the flow of data of AngularJS application. A controller is defined using ng-controller directive. A controller is a JavaScript object containing attributes/properties and functions. Each controller accepts $scope as a parameter which refers to the application/module that controller is to control.\r\n<p>Here, the AngularJS application runs inside the <em class=\"thick\"><xmp><div></xmp></em> is defined by ng-app=\"myApp\".\r\n<li>The AngularJS directive is ng-controller=\"myCtrl\" attribute.</li>\r\n<li>The myCtrl function is a JavaScript function.</li>\r\n<li>AngularJS will invoke the controller with a $scope object.</li>\r\n<li>In AngularJS, $scope is the application object (the owner of application variables and functions).</li>\r\n<li>The controller creates two properties (variables) in the scope (firstName and lastName).</li>\r\n<li>The ng-model directives bind the input fields to the controller properties (firstName and lastName).</li>\r\n\r\n</div>"
        },
        {
            "topic_id": "7",
            "topic_name": "FILTERS",
            "description": "<div>\r\n<h4>AngularJS Filters</h4>\r\n\r\n<p>Filters are generally great, theyre powerful for transforming our data so easily into reusable units. It is similar to a service in many ways as it has advantage of behaving on a global scope once created. we can invoke a filter on both the data binding in your html or directly inside of your controller or directive by using the $filter service. Lets break down the structure of a filter. \r\n<p>AngularJS Filters allow us to format the data to display on UI without changing original format. Filters can be used with an expression or directives using pipe (|) sign.\r\n<div><pre class=\"JavaScript\"><xmp>{{expression | filterName:parameter }}</xmp></div>\r\n<p>These are used to format the value of an expression for display to the user. They can be added to templates, controllers, directives or services and we can also define our own filters. Using these, Angular let us to organize data, so that it only displays data if it meets certain criteria. These can be added in AngularJS to format data.\r\n\r\n<p>These are some filters provided by AngularJS to transform data:-\r\n<p><em class=\"thick\">currency:- </em>Format a number to a currency format.\r\n<p><em class=\"thick\">date:- </em> Format a date to a specified format.\r\n<p><em class=\"thick\">filter:- </em> Select a subset of items from an array.\r\n<p><em class=\"thick\">json:- </em> Format a JavaScript object to a JSON string.\r\n<p><em class=\"thick\">limitTo:- </em> Creates a new array or string having only a specified number of elements.\r\n<p><em class=\"thick\">lowercase:- </em> convert a string to lower case.\r\n<p><em class=\"thick\">number:- </em> Format a number as text.\r\n<p><em class=\"thick\">orderBy:- </em> Order an array by an expression.\r\n<p><em class=\"thick\">uppercase:- </em> convert a string to upper case.\r\n\r\n<h4>1. currency</h4>\r\n\r\n<p>This filter Formats a number as a currency. When there is no currency symbol provided, default symbol for current locale is used.\r\n<div><pre class=\"JavaScript\"><xmp>{{ currency_expression | currency : currency_symbol : fractionSize}}</xmp></div>\r\n<h4>Example:-</h4>\r\n<div><pre class=\"JavaScript\"><xmp>\r\n<!DOCTYPE html>\r\n<html >\r\n<head>\r\n    <script src=\"~/Scripts/angular.js\"></script>\r\n</head>\r\n<body ng-app=\"myApp\">\r\n    <div ng-controller=\"myController\">\r\n        Default currency: {{person.salary | currency}} <br />\r\n        Custom currency identifier: {{person.salary | currency:Rs.}} <br />\r\n        No Fraction: {{person.salary | currency:Rs.:0}} <br />\r\n        Fraction 2: <span ng-bind=\"person.salary| currency:GBP:2\"></span>\r\n    </div>\r\n    <script>\r\n        var myApp = angular.module(myApp, []);\r\n        \r\n        myApp.controller(\"myController\", function ($scope) {\r\n            $scope.person = { firstName: James, lastName: Canary, salary: 20000}\r\n        });\r\n    </script>\r\n</body>\r\n</html>\r\n</xmp></div>\r\n\r\n<h4>Output:-</h4>\r\n<div><pre class=\"JavaScript\"><xmp>\r\n<p><em class=\"thick\">Default currency:- </em>$20,000.00 \r\n<p><em class=\"thick\">Custom currency identifier:-</em>Rs.20,000.00 \r\n<p><em class=\"thick\">No Fraction:-</em>Rs.20,000 \r\n<p><em class=\"thick\">Fraction 2:-</em> GBP20,000.00 \r\n</xmp></div>\r\n\r\n<h4>2. Date</h4>\r\n\r\n<p>Format a date to a specified format.\r\n<div><pre class=\"JavaScript\"><xmp>{{ date_expression | date : format : timezone}}</xmp></div>\r\n<h4>Example:-</h4>\r\n<div><pre class=\"JavaScript\"><xmp>\r\n<html>\r\n<head>\r\n    <script src=\"https://ajax.googleapis.com/ajax/libs/angularjs/1.3.16/angular.min.js\"></script>\r\n</head>\r\n<body ng-app >\r\n<h1>AngularJS Date Filter Demo: </h1>\r\n    <div ng-init=\"person.DOB = 321224234848\">\r\n        Default date: {{person.DOB| date}} <br />\r\n        Short date: {{person.DOB| date:short}} <br />\r\n        Long date: {{person.DOB | date:longDate}} <br />\r\n        Year: {{person.DOB | date:yyyy}} <br />\r\n    </div>\r\n</body>\r\n</html>\r\n</xmp></div>\r\n\r\n<h4>Output:-</h4>\r\n<div><pre class=\"JavaScript\"><xmp>\r\n<p><em class=\"thick\">Default date: </em>Mar 7, 1980 \r\n<p><em class=\"thick\">Short date: </em>3/7/80 2:27 AM \r\n<p><em class=\"thick\">Long date: </em>March 7, 1980 \r\n<p><em class=\"thick\">Year:</em> 1980 \r\n</xmp></div>\r\n<h4>3. Number</h4>\r\n\r\n<p>Format a number as text.\r\n<div><pre class=\"JavaScript\"><xmp>{{ expression | number:fractionSize}}</xmp></div>\r\n<h4>Example:-</h4>\r\n<div><pre class=\"JavaScript\"><xmp>\r\n<!DOCTYPE html>\r\n<html>\r\n<head>\r\n    <script src=\"https://ajax.googleapis.com/ajax/libs/angularjs/1.3.16/angular.min.js\"></script>\r\n</head>\r\n<body ng-app >\r\n<h1>AngularJS Number Filter Demo: </h1>\r\n    Enter Amount: <input type=\"number\" ng-model=\"amount\" /> <br />\r\n\r\n    100000 | number = {{100000 | number}} <br />\r\n    amount | number = {{amount | number}} <br />\r\n    amount | number:2 = {{amount | number:2}} <br />\r\n    amount | number:4 = {{amount | number:4}} <br />\r\n    amount | number = <span ng-bind=\"amount | number\"></span>\r\n</body>\r\n</html></xmp></div>\r\n\r\n\r\n<h4>Output:-</h4>\r\n<div><pre class=\"JavaScript\"><xmp>\r\nEnter Amount: 2000 \r\n100000 | number = 100,000 \r\namount | number = 2,000 \r\namount | number:2 = 2,000.00 \r\namount | number:4 = 2,000.0000 \r\namount | number = 2,000\r\n</xmp></div>\r\n\r\n\r\n<h4>4. Uppercase/lowercase:-</h4>\r\n<p>convert a string to uppercase/lowercase\r\n<div><pre class=\"JavaScript\"><xmp>\r\n<!DOCTYPE html>\r\n<html>\r\n<head>\r\n    <script src=\"https://ajax.googleapis.com/ajax/libs/angularjs/1.3.16/angular.min.js\"></script>\r\n</head>\r\n<body ng-app >\r\n<h1>AngularJS Uppercase/Lowercase Filter Demo: </h1>\r\n    <div ng-init=\"person.firstName=James;person.lastName=Canary\">\r\n        Lower case: {{person.firstName +   + person.lastName | lowercase}} <br />\r\n        Upper case: {{person.firstName +   + person.lastName | uppercase}} \r\n    </div>\r\n</body>\r\n</html>\r\n</xmp></div>\r\n\r\n<h4>Output:-</h4>\r\n<div><pre class=\"JavaScript\"><xmp>\r\nLower case: james canary \r\nUpper case: JAMES CANARY\r\n</xmp></div>\r\n\r\n<h4>5. orderBy:-</h4>\r\n<p>Order an array by an expression.\r\n<div><pre class=\"JavaScript\"><xmp>{{ expression | orderBy : predicate_expression : reverse}}</xmp></div>\r\n<h4>Example:-</h4>\r\n<div><pre class=\"JavaScript\"><xmp>\r\n<!DOCTYPE html>\r\n<html>\r\n<head>\r\n    <script src=\"https://ajax.googleapis.com/ajax/libs/angularjs/1.3.16/angular.min.js\"></script>\r\n</head>\r\n<body ng-app=\"myApp\" >\r\n<h1>AngularJS orderBy Filter Demo: </h1>\r\n    <div ng-controller=\"myController\">\r\n        <select ng-model=\"SortOrder\">\r\n            <option value=\"+name\">Name (asc)</option>\r\n            <option value=\"-name\">Name (dec)</option>\r\n        </select>\r\n        <ul ng-repeat=\"person in persons | orderBy:SortOrder\">\r\n            <li>{{person.name}} - {{person.phone}}</li>\r\n        </ul>\r\n    </div>\r\n    <script>\r\n        var myApp = angular.module(myApp, []);\r\n        \r\n        myApp.controller(\"myController\", function ($scope) {\r\n        \r\n            $scope.persons = [{ name: Johny, phone: 512-455-1555 },\r\n                         { name: Marie, phone: 899-333-3444 },\r\n                         { name: Mikey, phone: 511-444-4333 },\r\n                         { name: Billy, phone: 145-788-5666 },\r\n                         { name: Rama, phone: 433-444-8777 },\r\n                         { name: Stevens, phone: 218-345-5666 }]\r\n            \r\n            $scope.SortOrder = +name;\r\n        });\r\n    </script>\r\n</body>\r\n</html>\r\n</xmp></div>\r\n\r\n<h4>Output:-</h4>\r\n<div><pre class=\"JavaScript\"><xmp>\r\nName(asc)\r\nBilly - 145-788-5666\r\nJohny - 512-455-1555\r\nMarie - 899-333-3444\r\nMikey - 511-444-4333\r\nRama - 433-444-8777\r\nStevens - 218-345-5666\r\n\r\nName(dec)\r\nStevens - 218-345-5666\r\nRama - 433-444-8777\r\nMikey - 511-444-4333\r\nMarie - 899-333-3444\r\nJohny - 512-455-1555\r\nBilly - 145-788-5666\r\n</xmp></div>\r\n</div>"
        },
        {
            "topic_id": "8",
            "topic_name": "TABLE",
            "description": "<div>\r\n\r\n<p>Table data is normally repeatable by nature. The ng-repeat directive is used to draw tables in AngularJS easily.\r\n<h4>Example:-</h4>\r\n<div><pre class=\"JavaScript\"><xmp>\r\n<!DOCTYPE html>  \r\n<html>  \r\n   <head>  \r\n      <title>Angular JS Table</title>  \r\n      <script src = \"http://ajax.googleapis.com/ajax/libs/angularjs/1.3.14/angular.min.js\"></script>  \r\n        \r\n      <style>  \r\n         table, th , td {  \r\n            border: 1px solid grey;  \r\n            border-collapse: collapse;  \r\n            padding: 5px;  \r\n         }  \r\n           \r\n         table tr:nth-child(odd) {  \r\n            background-color: #f2f2f2;  \r\n         }  \r\n           \r\n         table tr:nth-child(even) {  \r\n            background-color: #ffffff;  \r\n         }  \r\n      </style>  \r\n   </head>  \r\n   <body>  \r\n      AngularJS Sample Application  \r\n      <div ng-app = \"mainApp\" ng-controller = \"studentController\">  \r\n         <table border = \"0\">  \r\n            <tr>  \r\n               <td>Enter first name:</td>  \r\n               <td><input type = \"text\" ng-model = \"student.firstName\"></td>  \r\n            </tr>  \r\n            <tr>  \r\n               <td>Enter last name: </td>  \r\n               <td>  \r\n                  <input type = \"text\" ng-model = \"student.lastName\">  \r\n               </td>  \r\n            </tr>  \r\n            <tr>  \r\n               <td>Name: </td>  \r\n               <td>{{student.fullName()}}</td>  \r\n            </tr>  \r\n            <tr>  \r\n               <td>Subject:</td>  \r\n              <td>  \r\n                  <table>  \r\n                     <tr>  \r\n                        <th>Name</th>.  \r\n                        <th>Marks</th>  \r\n                     </tr>  \r\n                     <tr ng-repeat = \"subject in student.subjects\">  \r\n                        <td>{{ subject.name }}</td>  \r\n                        <td>{{ subject.marks }}</td>  \r\n                     </tr>  \r\n                  </table>  \r\n               </td>  \r\n                      \r\n            </tr>  \r\n         </table>  \r\n           \r\n      </div>  \r\n        \r\n      <script>  \r\n         var mainApp = angular.module(\"mainApp\", []);  \r\n           \r\n         mainApp.controller(studentController, function($scope) {  \r\n            $scope.student = {  \r\n               firstName: \"Rahul\",  \r\n               lastName: \"Rai\",  \r\n               fees:500,  \r\n                 \r\n               subjects:[  \r\n                  {name:Physics,marks:70},  \r\n                  {name:Chemistry,marks:80},  \r\n                  {name:Math,marks:90},  \r\n                  {name:English,marks:50},  \r\n                  {name:Hindi,marks:60}  \r\n               ],  \r\n                 \r\n               fullName: function() {  \r\n                  var studentObject;  \r\n                  studentObject = $scope.student;  \r\n                  return studentObject.firstName + \" \" + studentObject.lastName;  \r\n               }  \r\n            };  \r\n         });  \r\n      </script>  \r\n   </body>  \r\n</html>  \r\n</xmp></div>\r\n\r\n<h4>Output:-</h4>\r\n\r\n\r\n<table>\r\n<tbody>\r\n<tr>\r\n<td>Enter first name:</td>\r\n<td>Rahul</td>\r\n</tr>\r\n<tr>\r\n<td>Enter last name: </td>\r\n<td>Rai</td>\r\n</tr>\r\n<tr>\r\n<td>Name: </td>\r\n<td>Rahul Rai</td>\r\n</tr>\r\n</tbody>\r\n</table>\r\n\r\n\r\n\r\n\r\n<h4>Subject:</h4>\r\n\r\n<table>\r\n<tbody>\r\n<tr>\r\n<th>Name</th>\r\n<th>Marks</th>\r\n</tr>\r\n<td>Physics</td>\r\n<td>70</td>\r\n</tr>\r\n<td>Chemistry</td>\r\n<td>80</td>\r\n</tr>\r\n<td>Math</td>\r\n<td>90</td>\r\n</tr>\r\n<td>English</td>\r\n<td>50</td>\r\n</tr>\r\n<td>Hindi</td>\r\n<td>60</td>\r\n</tr>\r\n</tbody>\r\n</table>\r\n\r\n</div>"
        },
        {
            "topic_id": "9",
            "topic_name": "ROUTING",
            "description": "<div>\r\n\r\n<p>In AngularJS,routing is what allows you to create Single Page Applications,it enable you to create different URLs for different content in your application.Routing is a core feature in AngularJS.\r\n\r\n<p><em class=\"thick\">1.</em> it allows  to render multiple content depending on which route is chosen.\r\n\r\n<p><em class=\"thick\">2.</em> provides deep linking services and directives for angular applications.\r\n\r\n<p><em class=\"thick\">3.</em> One must Need to download angular-route.js script that contains the ngRoute module from AngularJS official website to use the routing feature.\r\n\r\n<p><em class=\"thick\">4.</em> Routing is used to load different part of application and its help to divide application logically and make it manageable.\r\n\r\n\r\n<p><em class=\"thick\">5.</em> With the help of routing we can create different URLs for different content in your application.\r\n\r\n<p><em class=\"thick\">6.</em> A route is specified in the URL after the # sign.\r\n\r\n<h4>ngRoute</h4>\r\n\r\n<p>If we want to navigate to different pages in the application, but you also want the application to be a (Single Page Application), with no page reloading,then we use ngRoute module.\r\n\r\n<p>The ngRoute module routes your application to different pages without reloading the entire application,SPA is supported via routing module ngRoute.  When a user requests a specific url,the routing engine grabs that url and shows the view based on the defined routing rules.\r\n\r\n\r\n<h4>Dependencies</h4>\r\n<div><pre class=\"JavaScript\"><xmp>\r\n$routeParams\r\n\r\n$routeProvider\r\n</xmp></div>\t\r\n\r\n<h4>$route</h4>\r\n<p>$route is used for linking URLs to controllers and views (HTML partials). It watches $location.url() and tries to map the path to an existing route definition.\r\n\r\n<h4>$routeParams</h4>\t\r\n<p>$routeParams service allows you to retrieve the current set of route parameters.\r\n\r\n\r\n<h4>ngView</h4>\r\n\r\n<p>ngView is a angular directive that completes the $route service by including the rendered template of the current route into the main page(index.html) file.Every time the current route changes,the view changes with it according to the configuration.\r\n\r\n<div><pre class=\"JavaScript\"><xmp>\r\nangular.module(myApp, [ngRoute]);\r\n</xmp></div>\r\n\r\n\r\n<h4>ngRoute Module</h4>\r\n\r\n<p>This module provides routing in AngularJS application and also provides linking services and directives. \r\n\r\n<h4>Component of ngRoute Module</h4>\r\n\r\n<p>There are four MAJOR components of ngRoute module:\r\n\r\n<p><em class=\"thick\">ngView:</em>creates new scope,used to load html templates.\r\n\r\n<p><em class=\"thick\">$routeProvider:</em> It configure routes.\r\n\r\n<p><em class=\"thick\">$route:</em> It is used to make linking URLs between controllers and view.\r\n\r\n<p><em class=\"thick\">$routeParams:</em> This is Angular service which allows us to retrieve the current set of route parameters.\r\n<p><em class=\"thick\">$routeProvider:</em> used for configuring the routes in AngularJS application.\r\n\r\n\r\n<p>Implementation of simple routing in AngularJS application\r\n\r\n\r\n<p><em class=\"thick\">step 1-</em>include angular.js, angular-route.js, This is a JavaScript file developed by Google.The angular-route.js includes necessary functions for routing.\r\n<p><em class=\"thick\">step 2-</em>Apply ng-app directive.\r\n<p><em class=\"thick\">step 3-</em>Apply ng-view directive to elements where you want to inject another view.\r\n\r\n<p><em class=\"thick\">step 4-</em>create an application module and INJECT ngRoute as a dependency module.\r\n\r\n<p><em class=\"thick\">step 5-</em>configure the routing rules.So,use config() method to configure the routing rules BY $routingProvider.\r\n\r\n\r\n\r\n\r\n\r\n<h4>syntax of statement.</h4>\r\n\r\n\r\n<div><pre class=\"JavaScript\"><xmp>angular.module(\"techproApp\", [ngRoute]);</xmp></div>\r\n\r\n\r\n<p>Links to your route from within your HTML page.\r\n<div><pre class=\"JavaScript\"><xmp><a href=\"#/route10\">Route 20</a></xmp></div>\r\n\r\n<p>inclusion of the ng-view directive,used in a div tag,used to inject the content of the view.\r\n\r\n<h4>EXPLAINATION</h4>\r\n\r\n<p>The first step is to ensure to include the \"ngRoute module.\"\r\n\r\n<p>After ngRoute Angular will automatically handle the routing in your application,The ngRoute module has all of the functionality which allows for routing to be possible.\r\n\r\n<p>The $routeprovider is a service that angular uses to listen in the background to the routes which are called.\r\n\r\n<p>Controller mainController to process any business logic.\r\n\r\n</div>\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n"
        },
        {
            "topic_id": "10",
            "topic_name": "HTML DOM",
            "description": "<div>\r\n\r\n<p>In AngularJS, It has directives for binding application data to attributes of HTML DOM elements.\r\n<p>These directives are:\r\n<p><em class=\"thick\">Directive</em> Description\r\n<p><em class=\"thick\">ng-disabled</em> Disables a given control.\r\n<p><em class=\"thick\">ng-show</em> Renders a given control.\r\n<p><em class=\"thick\">ng-hide</em> Hides a given control.\r\n<p><em class=\"thick\">ng-click</em> Represents an AangularJS click event.\r\n\r\n<h4>1. ng-disabled directive:-</h4>\r\n<p>The ng-disabled directive binds AngularJS application data to the disabled attribute of HTML elements. Bind the model to an checkbox & see the variation.\r\n<div><pre class=\"JavaScript\"><xmp>\r\n<input type = \"checkbox\" ng-model = \"enableDisableButton\">Disable Button \r\n<button ng-disabled = \"enableDisableButton\">Click Me!</button></xmp></div>\r\n\r\n<h4>2. ng-show directive:-</h4>\r\n<p>The ng-show directive shows or hides an HTML element. Bind the model to a checkbox & see the variation.\r\n<div><pre class=\"JavaScript\"><xmp>\r\n<input type = \"checkbox\" ng-model = \"showHide1\">Show Button  \r\n<button ng-show = \"showHide1\">Click Me!</button> </xmp></div> \r\n\r\n<h4>3. ng-hide directive:-</h4>\r\n<p>The ng-hide directive hides or shows an HTML element. Bind the model to a checkbox & see the variation.\r\n<div><pre class=\"JavaScript\"><xmp>\r\n<input type = \"checkbox\" ng-model = \"showHide2\">Hide Button  \r\n<button ng-hide = \"showHide2\">Click Me!</button></xmp></div>\r\n\r\n<h4>4. ng-click directive:-</h4>\r\n<p>The ng-click directive counts the total clicks an HTML element. Bind the model to html & see the variation.\r\n<div><pre class=\"JavaScript\"><xmp>Total click: {{ clickCounter }}</xmp></div>\r\n</div>\r\n\r\n"
        },
        {
            "topic_id": "11",
            "topic_name": "MODULES",
            "description": "<div>\r\n\r\n<p>Module defines an application. These are used to separate logics say services, controllers, application etc.\r\n<p>There are two types of modules:-\r\n<p><em class=\"thick\">Application Module:- </em>Used to initialize an application with controller.\r\n<p><em class=\"thick\">Controller Module:- </em>Used to define the controller.\r\n\r\n<h4>1. Application Module:-</h4>\r\n<p>angularApp.js\r\n<div><pre class=\"JavaScript\"><xmp>\r\nvar angularApp = angular.module(\"angularApp\", []);\r\n</xmp></div>\r\n\r\n<p>Here weve declared an application angularApp module using angular.module function. Weve passed an empty array to it. This array usually contains dependent modules.\r\n\r\n<h4>2. Controller Module:-</h4>\r\n<p>studentController.js\r\n<h4>Example:-</h4>\r\n<div><pre class=\"JavaScript\"><xmp>\r\nmainApp.controller(\"studentController\", function($scope) {\r\n   $scope.student = {\r\n      firstName: \"Ashish\",\r\n      lastName: \"Agrawal\",\r\n      fees:500,\r\n      \r\n      subjects:[\r\n         {name:Physics,marks:75},\r\n         {name:Chemistry,marks:85},\r\n         {name:Math,marks:60},\r\n         {name:English,marks:70},\r\n         {name:Hindi,marks:65}\r\n      ],\r\n      \r\n      fullName: function() {\r\n         var studentObject;\r\n         studentObject = $scope.student;\r\n         return studentObject.firstName + \" \" + studentObject.lastName;\r\n      }\r\n   };\r\n});\r\n</xmp></div>\r\n\r\n<p>Here weve declared a controller studentController module using angularApp.controller function.\r\n\r\n<h4>Use Modules:-</h4>\r\n<div><pre class=\"JavaScript\"><xmp>\r\n<div ng-app = \"angularApp\" ng-controller = \"studentController\">\r\n   ...\r\n   <script src = \"angularApp.js\"></script>\r\n   <script src = \"studentController.js\"></script>\r\n\t\r\n</div></xmp></div>\r\n\r\n<p>Well import angularApp.js and studentController.js in the main html page.\r\n<div><pre class=\"JavaScript\"><xmp>\r\n<html>\r\n   <head>\r\n      <title>Angular JS Modules</title>\r\n      <script src = \"https://ajax.googleapis.com/ajax/libs/angularjs/1.3.14/angular.min.js\"></script>\r\n      <script src = \"/angularjs/src/module/angularApp.js\"></script>\r\n      <script src = \"/angularjs/src/module/studentController.js\"></script>\r\n      \r\n      <style>\r\n         table, th , td {\r\n            border: 1px solid grey;\r\n            border-collapse: collapse;\r\n            padding: 5px;\r\n         }\r\n         \r\n         table tr:nth-child(odd) {\r\n            background-color: #f2f2f2;\r\n         }\r\n         \r\n         table tr:nth-child(even) {\r\n            background-color: #ffffff;\r\n         }\r\n      </style>\r\n      \r\n   </head>\r\n   \r\n   <body>\r\n      AngularJS Sample Application\r\n      <div ng-app = \"angularApp\" ng-controller = \"studentController\">\r\n         \r\n         <table border = \"0\">\r\n            <tr>\r\n               <td>Enter first name:</td>\r\n               <td><input type = \"text\" ng-model = \"student.firstName\"></td>\r\n            </tr>\r\n         \r\n            <tr>\r\n               <td>Enter last name: </td>\r\n               <td><input type = \"text\" ng-model = \"student.lastName\"></td>\r\n            </tr>\r\n         \r\n            <tr>\r\n               <td>Name: </td>\r\n               <td>{{student.fullName()}}</td>\r\n            </tr>\r\n         \r\n            <tr>\r\n               <td>Subject:</td>\r\n               <td>\r\n               \r\n                  <table>\r\n                     <tr>\r\n                        <th>Name</th>\r\n                        <th>Marks</th>\r\n                     </tr>\r\n                  \r\n                     <tr ng-repeat = \"subject in student.subjects\">\r\n                        <td>{{ subject.name }}</td>\r\n                        <td>{{ subject.marks }}</td>\r\n                     </tr>\r\n                  </table>\r\n                  \r\n               </td>\r\n            </tr>\r\n         </table>\r\n         \r\n      </div>\r\n      \r\n   </body>\r\n</html>\r\n</div></xmp></div>\r\n</div>"
        },
        {
            "topic_id": "12",
            "topic_name": "FORMS",
            "description": "<div>\r\n\r\n<p>It provides data-binding and validation of input controls.The HTML form is a group of input controls where user can enter the data. AngularJS refines form filling and validation. We can use ng-click to manage AngularJS click on button and use $dirty and $invalid flags to do the validations in seemless way. We use novalidate with a form declaration to disable any browser specific validation. Form controls makes use of Angular events. Lets have a quick look on events first.\r\n\r\n<h4>Events: </h4>\r\n<p>AngularJS has multiple events which can be used with the HTML controls. For example ng-click is used with button. Following are supported events in Angular JS.\r\n<p><em class=\"thick\">ng-click</em>\r\n<p><em class=\"thick\">ng-dblclick</em>\r\n<p><em class=\"thick\">ng-mousedown</em>\r\n<p><em class=\"thick\">ng-mouseup</em>\r\n<p><em class=\"thick\">ng-mouseenter</em>\r\n<p><em class=\"thick\">ng-mouseleave</em>\r\n<p><em class=\"thick\">ng-mousemove</em>\r\n<p><em class=\"thick\">ng-mouseover</em>\r\n\r\n<h4>1. ng-click:</h4>\r\n<p>ng-click directive tells AngularJS what to do when an element is clicked.\r\n<div><pre class=\"JavaScript\"><xmp><element ng-click=\"expression\"></element></xmp></div>\r\n\r\n\r\n<h4>2. ng-dblclick:</h4>\r\n<p>ng-dblclick directive tells AngularJS what to do when an element is double-clicked.\r\n<div><pre class=\"JavaScript\"><xmp><element ng-dblclick=\"expression\"></element></xmp></div>\r\n\r\n\r\n<h4>3. ng-mousedown:</h4>\r\n<p>ng-mousedown directive is used to raise or call events/custom functions on mouse click. This directive tells AngularJS what to do when a mouse button is clicked on the specific element.\r\n<div><pre class=\"JavaScript\"><xmp><element ng-mousedown=\"expression\"></element></xmp></div>\r\n\r\n\r\n<h4>4. mouseup:</h4>\r\n<p>mouseup event occurs when the left mouse button is released over the selected element or say when mouse click is finished.\r\n<div><pre class=\"JavaScript\"><xmp><element ng-mouseup=\"expression\"></element></xmp></div>\r\n\r\n\r\n<h4>5. ng-mouseenter:</h4>\r\n<p>ng-mouseenter directive tells AngularJS what to do when a mouse cursor enters the specific element.\r\n<div><pre class=\"JavaScript\"><xmp><element ng-mouseenter=\"expression\"></element></xmp></div>\r\n\r\n\r\n<h4>6. ng-mouseleave:</h4>\r\n<p>ng-mouseleave directive is used to specify the custom behavior that executes when a mouse cursor leaves the specific element.\r\n<div><pre class=\"JavaScript\"><xmp><element ng-mouseleave=\"expression\"></element></xmp></div>\r\n\r\n\r\n<h4>7. ng-mousemove:</h4>\r\n<p>ng-mousemove directive tells AngularJS what to do when a mouse cursor moves over the specific element. This directive is used to attach specific functionality on mouse move event.\r\n<div><pre class=\"JavaScript\"><xmp><element ng-mousemove=\"expression\"></element></xmp></div>\r\n\r\n\r\n<h4>8. ng-mouseover:</h4>\r\n<p>ng-mouseover event in angularjs fires an event whenever mouse cursor hover on element. This directive tells AngularJS what to do when a mouse cursor moves over the specific element.\r\n<div><pre class=\"JavaScript\"><xmp><element ng-mouseover=\"expression\"></element></xmp></div>\r\n\r\n</div>\r\n\r\n\r\n\r\n"
        },
        {
            "topic_id": "13",
            "topic_name": "INCLUDES",
            "description": "<div>\r\n<p>Using AngularJS, we can include HTML content using the ng-include directive.\r\n<div><pre class=\"php\"><xmp><div ng-app = \"\" ng-controller = \"employeeController\">\r\n   <div ng-include = \"main.html\"></div>\r\n   <div ng-include = \"salary.html\"></div>\r\n</div></xmp></div>\r\n\r\n\r\n\r\n<p><em class=\"thick\">Example :</em>\r\n<div><pre class=\"php\"><xmp><html>\r\n <body>\r\n    AngularJS Sample Application \r\n    <div ng-app = \"mainApp\" ng-controller=\"employeeController\">\r\n      <div ng-include = \"/angularjs/src/include/main.html\"></div>\r\n      <div ng-include = \"/angularjs/src/include/salary.html\"></div>\r\n    </div>\r\n      \r\n    <script>\r\n      var mainApp = angular.module(\"mainApp\", []);\r\n      mainApp.controller(employeeController, function($scope) \r\n\t  {\r\n        $scope.employee = {\r\n          firstName: \"Ashish\",\r\n          lastName: \"Agrawal\",\r\n               \r\n          Salaries:[\r\n            {month:jan,salary:7000},\r\n\t\t\t{month:Feb,salary:8000},\r\n\t\t\t{month:Mar,salary:6500}\r\n          ],\r\n               \r\n          fullName: function() {\r\n            var employeeObject;\r\n            employeeObject = $scope.employee;\r\n\t\t\treturn employeeObject.firstName + \" \" + employeeObject.lastName;\r\n          }\r\n        };\r\n      });\r\n    </script> \r\n  </body>\r\n</html></xmp></div>\r\n\r\n\r\n\r\n<p><em class=\"thick\">main.html :</em>\r\n<div><pre class=\"php\"><xmp><table border = \"0\">\r\n   <tr>\r\n      <td>Enter first name:</td>\r\n      <td><input type = \"text\" ng-model = \"employee.firstName\"></td>\r\n   </tr>\r\n   \r\n   <tr>\r\n      <td>Enter last name: </td>\r\n      <td><input type = \"text\" ng-model = \"employee.lastName\"></td>\r\n   </tr>\r\n   \r\n   <tr>\r\n      <td>Name: </td>\r\n      <td>{{employee.fullName()}}</td>\r\n   </tr>\r\n</table></xmp></div>\r\n\r\n\r\n\r\n<p><em class=\"thick\">salary.html :</em>\r\n<div><pre class=\"php\"><xmp><p>Salaries:\r\n<table>\r\n   <tr>\r\n      <th>Month</th>\r\n      <th>Salary</th>\r\n   </tr>\r\n   \r\n   <tr ng-repeat = \"salaries in employee.Salaries\">\r\n      <td>{{ employee.month }}</td>\r\n      <td>{{ employee.salary }}</td>\r\n   </tr>\r\n</table></xmp></div>\r\n\r\n\r\n\r\n<p><em class=\"thick\">OUTPUT :</em>\r\n<table>\r\n<tbody>\r\n<tr>\r\n<td>Enter first name :</td>\r\n<td>Ashish</td>\r\n</tr>\r\n<tr>\r\n<td>Enter last name :</td>\r\n<td>Agrawal</td>\r\n</tr>\r\n<tr>\r\n<td>Name :</td>\r\n<td>Ashish Agrawal</td>\r\n</tr>\r\n</tbody>\r\n</table>\r\n\r\n\r\n<p>Salaries :\r\n<table>\r\n<tbody>\r\n<tr>\r\n<th>Month</th>\r\n<th>Salary</th>\r\n</tr>\r\n<tr>\r\n<td>Jan</td>\r\n<td>7000</td>\r\n</tr>\r\n<tr>\r\n<td>Feb</td>\r\n<td>8000</td>\r\n</tr>\r\n<tr>\r\n<td>Mar</td>\r\n<td>6500</td>\r\n</tr>\r\n</tbody>\r\n</table>\r\n</div>"
        },
        {
            "topic_id": "14",
            "topic_name": "AJAX",
            "description": "<div>\r\n<p>AJAX stands for Asynchronous JavaScript and XML. An important element of AJAX is the <em class=\"thick\">XMLHttpRequest</em> object which is a mechanism for exchanging data with a web server.\r\n<p>The server makes a database call to get the desired records. AngularJS needs data in JSON format. Once the data is ready, <em class=\"thick\">$https:</em> can be used to fetch the data from server.\r\n<p>We can fetch data by the following way :\r\n<div><pre class=\"php\"><xmp>function employeeController($scope,$https:) \r\n{\r\n  var url = \"data.txt\";\r\n  $https:.get(url).success( function(response) \r\n  {\r\n    $scope.employees = response; \r\n  });\r\n}</xmp></div>\r\n\r\n\r\n\r\n<p><em class=\"thick\">Data :</em>\r\n<div><pre class=\"php\"><xmp>[\r\n   {\r\n      \"Name\" : \"Ashish Agrawal\",\r\n      \"Id\" : 101,\r\n      \"Salary\" : \"8000\"\r\n   },\r\n\t\r\n   {\r\n      \"Name\" : \"Akash Sharma\",\r\n      \"Id\" : 201,\r\n      \"Salary\" : \"7000\"\r\n   },\r\n\t\r\n   {\r\n      \"Name\" : \"Himanshu Thakur\",\r\n      \"Id\" : 191,\r\n      \"Salary\" : \"7500\"\r\n   },\r\n\t\r\n   {\r\n      \"Name\" : \"Pradeep Kandpal\",\r\n      \"Id\" : 111,\r\n      \"Salary\" : \"7000\"\r\n   }\r\n]</xmp></div>\r\n\r\n\r\n\r\n<p><em class=\"thick\">test.html :</em>\r\n<div><pre class=\"php\"><xmp><html>\r\n  <body>\r\n      AngularJS Application\r\n      <div ng-app = \"\" ng-controller = \"employeeController\">\r\n      \r\n         <table>\r\n            <tr>\r\n               <th>Name</th>\r\n               <th>Id</th>\r\n               <th>Salary</th>\r\n            </tr>\r\n         \r\n            <tr ng-repeat = \"employee in employees\">\r\n               <td>{{ employee.Name }}</td>\r\n               <td>{{ employee.Id }}</td>\r\n               <td>{{ employee.Salary }}</td>\r\n            </tr>\r\n         </table>\r\n      </div>\r\n      \r\n      <script>\r\n         function employeeController($scope,$http) {\r\n            var url = \"data.txt\";\r\n\r\n            $http.get(url).then( function(response) {\r\n               $scope.employees = response.data;\r\n            });\r\n         }\r\n      </script>\r\n      \r\n      <script src = \"https://ajax.googleapis.com/ajax/libs/angularjs/1.2.15/angular.min.js\"></script>\r\n      \r\n  </body>\r\n</html></xmp></div>\r\n\r\n\r\n\r\n<p><em class=\"thick\">OUTPUT :</em>\r\n<table>\r\n<tbody>\r\n<tr>\r\n<th>Name</th>\r\n<th>Id</th>\r\n<th>Salary</th>\r\n</tr>\r\n<tr>\r\n<td>Ashish Agrawal</td>\r\n<td>101</td>\r\n<td>8000</td>\r\n</tr>\r\n<tr>\r\n<td>Akash Sharma</td>\r\n<td>201</td>\r\n<td>7000</td>\r\n</tr>\r\n<tr>\r\n<td>Himanshu Thakur</td>\r\n<td>191</td>\r\n<td>7500</td>\r\n</tr>\r\n<tr>\r\n<td>Pradeep Kandpal</td>\r\n<td>111</td>\r\n<td>7000</td>\r\n</tr>\r\n</tbody>\r\n</table>\r\n</div>"
        },
        {
            "topic_id": "15",
            "topic_name": "SCOPES",
            "description": "<div>\r\n<p>Scope is a special javascript object which works like a glue between controller and views, or say it helps to join them. It is an object that refers to the application model. In controllers, model data is accessed via $scope object.\r\n<p>Whatever function or model you apply in View (html file), that is accessed in controller using scope.\r\n<div><pre class=\"php\"><xmp><script>\r\n   var mainApp = angular.module(\"mainApp\", []);\r\n   \r\n   mainApp.controller(\"volumeController\", function($scope) {\r\n      $scope.message = \"In volume controller\";\r\n      $scope.type = \"volume\";\r\n   });\r\n</script></xmp></div>\r\n\r\n\r\n\r\n<h6>$scope</h6>\r\n<p>Whatever function or model you apply in View (html file), that is accessed in controller using scope. Only methods defined on this $scope object are accessible in the HTML/view. Scopes are hierarchical in nature.\r\n<div><pre class=\"php\"><xmp><script>\r\n   var mainApp = angular.module(\"mainApp\", []);\r\n   \r\n   mainApp.controller(\"volumeController\", function($scope) {\r\n      $scope.message = \"In volume controller\";\r\n      $scope.type = \"volume\";\r\n   });\r\n   \r\n   mainApp.controller(\"sphereController\", function($scope) {\r\n      $scope.message = \"In sphere controller\";\r\n   });\r\n\t\r\n</script></xmp></div>\r\n\r\n\r\n\r\n<p><em class=\"thick\">Example :</em>\r\n<div><pre class=\"php\"><xmp><html>\r\n <body>\r\n    AngularJS Sample Application\r\n    <div ng-app = \"mainApp\" ng-controller = \"shapeController\">\r\n      <p>{{message}} <br/> {{type}} \r\n         \r\n      <div ng-controller = \"circleController\">\r\n        <p>{{message}} <br/> {{type}} \r\n      </div>\r\n         \r\n      <div ng-controller = \"squareController\">\r\n        <p>{{message}} <br/> {{type}} \r\n      </div>\t\r\n    </div>\r\n\t\t\r\n    <script src = \"https://ajax.googleapis.com/ajax/libs/angularjs/1.3.14/angular.min.js\"></script>\r\n      \r\n    <script>\r\n      var mainApp = angular.module(\"mainApp\", []);\r\n         \r\n      mainApp.controller(\"volumeController\", function($scope) \r\n\t  {\r\n\t    $scope.message = \"In volume controller\";\r\n\t    $scope.type = \"volume\";\r\n\t  });\r\n   \r\n\t  mainApp.controller(\"sphereController\", function($scope) \r\n\t  {\r\n\t\t$scope.message = \"In sphere controller\";\r\n\t\t$scope.type = \"Sphere\";\r\n\t  });\r\n         \r\n      mainApp.controller(\"squareController\", function($scope) \r\n\t  {\r\n        $scope.message = \"In square controller\";\r\n        $scope.type = \"Square\";\r\n      });\t\r\n    </script> \r\n </body>\r\n</html></xmp></div>\r\n\r\n\r\n\r\n<p><em class=\"thick\">OUTPUT :</em>\r\n<div><pre class=\"php\"><xmp>In volume controller \r\nvolume\r\n\r\nn sphere controller \r\nSphere\r\n\r\nIn square controller \r\nSquare</xmp></div>\r\n\r\n\r\n\r\n<h6>$rootScope</h6>\r\n<p><em class=\"thick\">$rootScope</em> is the parent of all scopes, which makes every newly created $scope a child.\r\n<p><em class=\"thick\">$rootScope</em> is the global variable while <em class=\"thick\">$scope</em> works only in the same controller where it is defined.\r\n<p>So if we want to access any object, variable throughout project then we will use <em class=\"thick\">$rootScope</em> instead of <em class=\"thick\">$scope</em>.\r\n</div>"
        },
        {
            "topic_id": "16",
            "topic_name": "SERVICES",
            "description": "<div>\r\n<p>AngularJS services are objects or functions that performs particular tasks, generally they contain some business logic. One AngularJS application can have only only one service which can only be instantiated when components need them.\r\n<p>AngularJS provides many inbuilt services for example, $https:, $route, $window, $location etc.\r\n<li><em class=\"thick\">$https:</em> is used to get the server data.</li>\r\n<li><em class=\"thick\">$route</em> is used to define the routing information.</li>\r\n\r\n\r\n<p>There are two methods to create a service.\r\n<li>Factory Method</li>\r\n<li>Service Method</li>\r\n\r\n\r\n<p><em class=\"thick\">Factory Method :</em>\r\n<p>In this method, we first define a factory and then assign method to it.\r\n<div><pre class=\"php\"><xmp>var mainApp = angular.module(\"mainApp\", []);\r\nmainApp.factory(MathService, function() {\r\n   var factory = {};\r\n   \r\n   factory.addition = function(a, b) {\r\n      return a * b\r\n   }\r\n   \r\n   return factory;\r\n}); </xmp></div>\r\n\r\n\r\n\r\n<p><em class=\"thick\">Service Method :</em>\r\n<p>In this method, we first define a factory and then assign method to it.\r\n<div><pre class=\"php\"><xmp>mainApp.service(CalcService, function(MathService){\r\n  this.square = function(a) \r\n  {\r\n    return MathService.multiply(a,a);\r\n  }\r\n}); </xmp></div>\r\n</div>"
        },
        {
            "topic_id": "17",
            "topic_name": "DEPENDENCY INJECTION",
            "description": "<div>\r\n<p>Dependency injection is a software design pattern that allows the removal of hard-coded dependencies and makes it possible to change them, whether at run-time or compile-time.\r\n<p>The Angular injector subsystem is in charge of creating components, resolving their dependencies, and providing them to other components as requested. This helps make components reusable, maintainable and testable.\r\n\r\n<p>AngularJS provides a built-in Dependency Injection mechanism that can be used with the following core components:\r\n<li>service</li>\r\n<li>factory</li>\r\n<li>provider</li>\r\n<li>constant</li>\r\n<li>value</li>\r\n<p>Each of these components can be injected into each other as dependencies\r\n\r\n<h6>Service</h6>\r\n<p>In AngularJS, service is a JavaScript object which contains a set of functions to perform certain tasks. Services are defined using service() functions and then injected into controllers.\r\n<div><pre class=\"JavaScript\"><xmp>//define a module  \r\nvar mainApp = angular.module(\"mainApp\", []);  \r\n...  \r\n//create a service which defines a method square to return square of a number.  \r\nmainApp.service(CalcService, function(MathService){  \r\n   this.square = function(a) {  \r\n      return MathService.multiply(a,a);   \r\n   }  \r\n});  \r\n//inject the service \"CalcService\" into the controller  \r\nmainApp.controller(CalcController, function($scope, CalcService, defaultInput) {  \r\n   $scope.number = defaultInput;  \r\n   $scope.result = CalcService.square($scope.number);  \r\n    $scope.square = function() {  \r\n      $scope.result = CalcService.square($scope.number);  \r\n   }  \r\n});</xmp></div>\r\n\r\n\r\n\r\n<h6>Factory</h6>\r\n<p>factory is a function which is used to return value. it creates the value on demand. It normally uses a factory function to calculate and return the value.\r\n<div><pre class=\"php\"><xmp>var yourModule = angular.module(\"yourModule\", []);  \r\nyourModule.factory(\"myFactory\", function() {  \r\n    return \"a value\";  \r\n});  \r\nyourModule.controller(\"MyController\", function($scope, myFactory) {  \r\nconsole.log(myFactory);  \r\n});</xmp></div>\r\n\r\n<p><em class=\"thick\">Injecting a value :</em>\r\n<div><pre class=\"php\"><xmp>var yourModule = angular.module(\"yourModule\", []);  \r\nyourModule.value(\"numberValue\", 100);  \r\nyourModule.controller(\"MyController\", function($scope, numberValue) {  \r\n console.log(numberValue);  \r\n});</xmp></div>\r\n\r\n\r\n\r\n<h6>Provider</h6>\r\n<p>In AngularJS, provider is used internally to create services, factory etc. during config phase. Provider is a special factory method with a method get() which is used to return the value/service/factory.\r\n<div><pre class=\"php\"><xmp>//define a module  \r\nvar mainApp = angular.module(\"mainApp\", []);  \r\n...  \r\n//create a service using provider which defines a method square to return square of a number.  \r\nmainApp.config(function($provide) {  \r\n   $provide.provider(MathService, function() {  \r\n      this.$get = function() {  \r\n         var factory = {};    \r\n         factory.multiply = function(a, b) {  \r\n            return a * b;   \r\n         }  \r\n         return factory;  \r\n      };  \r\n   });  \r\n});</xmp></div>\r\n\r\n<h6>constant</h6>\r\n<p>ou cannot inject values into the module.config() function. Instead constants are used to pass values at config phase.\r\n<div><pre class=\"php\"><xmp>mainApp.constant(\"configParam\", \"constant value\");</xmp></div>\r\n\r\n\r\n\r\n<h6>Value</h6>\r\n<p>In AngularJS, value is a simple javascript object. It can be a number, string or JavaScript object. it is used to pass values to controller during config phase.\r\n<div><pre class=\"php\"><xmp>//define a module  \r\nvar yourModule = angular.module(\"yourModule\", []);  \r\n//create a value object and pass it a data.   \r\nyourModule.value(\"numberValue\", 1000);  \r\nyourModule.value(\"stringValue\", \"abcd\");  \r\nyourModule.value(\"objectValue\", { val1 : 1000, val2 : \"abcd\"} ); </xmp></div>\r\n\r\n<p><em class=\"thick\">Injecting a value :</em>\r\n<div><pre class=\"php\"><xmp>var yourModule = angular.module(\"yourModule\", []);  \r\nyourModule.value(\"numberValue\", 100);  \r\nyourModule.controller(\"MyController\", function($scope, numberValue) \r\n{  \r\n console.log(numberValue);  \r\n});</xmp></div>\r\n</div>"
        }
    ]

}
